import { NextRequest, NextResponse } from 'next/server';
import { Resend } from 'resend';
import { Twilio } from 'twilio';
import { checkApiKey } from '@/lib/auth';
import { getSupabaseAdmin } from '@/lib/supabase/server';

export const dynamic = 'force-dynamic';

export async function POST(req: NextRequest) {
  try {
    if (!checkApiKey(req)) {
      return NextResponse.json({ ok:false, error:"unauthorized" }, { status:401 });
    }

    const { recipientEmail, summary, patientName, patientPhone, whatsappNumber, sessionId, userId } = await req.json();

    // Validate required fields
    if (!recipientEmail || !summary) {
      return NextResponse.json(
        { ok: false, error: 'Missing required fields: recipientEmail, summary' },
        { status: 400 }
      );
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(recipientEmail)) {
      return NextResponse.json(
        { ok: false, error: 'Invalid email format' },
        { status: 400 }
      );
    }

    const results = [];

    // Send email via Resend
    if (process.env.RESEND_API_KEY) {
      try {
        const resend = new Resend(process.env.RESEND_API_KEY);
        
        const subject = patientName 
          ? `Safemama summary for ${patientName}`
          : 'Safemama summary';

        const htmlContent = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #1C3D3A;">Safemama Summary</h2>
            ${patientName ? `<p><strong>Patient:</strong> ${patientName}</p>` : ''}
            ${patientPhone ? `<p><strong>Phone:</strong> ${patientPhone}</p>` : ''}
            <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin-top: 0; color: #1C3D3A;">Summary</h3>
              <p style="white-space: pre-wrap;">${summary}</p>
            </div>
            <p style="color: #666; font-size: 12px; margin-top: 30px;">
              This report was generated by Safemama - Your Antenatal Companion
            </p>
          </div>
        `;

        const emailResult = await resend.emails.send({
          from: 'Safemama <reports@safemama.app>',
          to: [recipientEmail],
          subject,
          html: htmlContent,
        });

        results.push({ type: 'email', success: true, id: emailResult.data?.id });
      } catch (error) {
        console.error('Error sending email:', error);
        results.push({ type: 'email', success: false, error: error instanceof Error ? error.message : 'Unknown error' });
      }
    } else {
      results.push({ type: 'email', success: false, error: 'RESEND_API_KEY not configured' });
    }

    // Send WhatsApp via Twilio
    if (whatsappNumber && process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN && process.env.TWILIO_WHATSAPP_FROM) {
      try {
        const twilio = new Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
        
        let messageBody = `🏥 *Safemama Summary*\n\n`;
        if (patientName) {
          messageBody += `👤 *Patient:* ${patientName}\n`;
        }
        if (patientPhone) {
          messageBody += `📞 *Phone:* ${patientPhone}\n`;
        }
        messageBody += `\n📋 *Summary:*\n${summary}\n\n`;
        messageBody += `_Generated by Safemama - Your Antenatal Companion_`;

        const whatsappResult = await twilio.messages.create({
          from: process.env.TWILIO_WHATSAPP_FROM,
          to: `whatsapp:${whatsappNumber}`,
          body: messageBody,
        });

        results.push({ type: 'whatsapp', success: true, id: whatsappResult.sid });
      } catch (error) {
        console.error('Error sending WhatsApp:', error);
        results.push({ type: 'whatsapp', success: false, error: error instanceof Error ? error.message : 'Unknown error' });
      }
    } else if (whatsappNumber) {
      results.push({ type: 'whatsapp', success: false, error: 'Twilio not configured' });
    }

    // Check if at least one delivery method succeeded
    const hasSuccess = results.some(result => result.success);
    
    if (hasSuccess) {
      // Insert record into conversation_summaries table
      try {
        const supabase = getSupabaseAdmin();
        const { error: insertError } = await supabase
          .from('conversation_summaries')
          .insert({
            session_id: sessionId ?? 'unknown',
            user_id: userId ?? null,
            summary: summary,
            sent_email_to: recipientEmail,
            sent_whatsapp_to: whatsappNumber ?? null,
            sent_at: new Date().toISOString()
          });

        if (insertError) {
          console.error('Error inserting conversation summary:', insertError);
          // Don't fail the request if summary insertion fails
        }
      } catch (error) {
        console.error('Error inserting conversation summary:', error);
        // Don't fail the request if summary insertion fails
      }

      return NextResponse.json({ 
        ok: true, 
        results 
      });
    } else {
      return NextResponse.json(
        { ok: false, error: 'Failed to send report via any method', results },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('Error in send-report API:', error);
    return NextResponse.json(
      { ok: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}